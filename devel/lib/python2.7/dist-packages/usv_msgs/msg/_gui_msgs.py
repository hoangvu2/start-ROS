# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from usv_msgs/gui_msgs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gui_msgs(genpy.Message):
  _md5sum = "e85378122f7e5778d97d9e6e96c6698a"
  _type = "usv_msgs/gui_msgs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#huong dan msg trong ros
	int32 setyaw			
	uint16 BT1			    
	float64[15] Bspline_px
"""
  __slots__ = ['setyaw','BT1','Bspline_px']
  _slot_types = ['int32','uint16','float64[15]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setyaw,BT1,Bspline_px

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gui_msgs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.setyaw is None:
        self.setyaw = 0
      if self.BT1 is None:
        self.BT1 = 0
      if self.Bspline_px is None:
        self.Bspline_px = [0.] * 15
    else:
      self.setyaw = 0
      self.BT1 = 0
      self.Bspline_px = [0.] * 15

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iH().pack(_x.setyaw, _x.BT1))
      buff.write(_get_struct_15d().pack(*self.Bspline_px))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.setyaw, _x.BT1,) = _get_struct_iH().unpack(str[start:end])
      start = end
      end += 120
      self.Bspline_px = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iH().pack(_x.setyaw, _x.BT1))
      buff.write(self.Bspline_px.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.setyaw, _x.BT1,) = _get_struct_iH().unpack(str[start:end])
      start = end
      end += 120
      self.Bspline_px = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=15)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
_struct_iH = None
def _get_struct_iH():
    global _struct_iH
    if _struct_iH is None:
        _struct_iH = struct.Struct("<iH")
    return _struct_iH
